Node.js 검색

16.14.2 LTS 안정적, 신뢰도 높음 다운로드 및 (기본값으로)설치

------------------------------------------------------------------

return( ); 은 하나밖에 보내지 못하기 때문에 하나의 묶음으로 묶어줘야한다

------------------------------------------------------------------

VScode에서 Ctrl + , 후에 emmet 검색, 항목추가

항목 javascript
값 javascriptreact 를 설정해주면 emmet기능이 추가된다.

------------------------------------------------------------------

바인딩 = { }

바인딩 안에는 javascript 문법이 사용된다.

바인딩 안에서 style을 인라인으로 부여할 땐, 바인딩 안에 스코프기호가 
한 번 더 들어간다. 여기 style에서는 camel표기법으로 사용된다.
style = { { color : 'red', fontSize : '20px' } }

------------------------------------------------------------------

Component

Component는 꼭 return( );을 사용하여 값을 반환해주어야 한다.
Component를 문서 내부 밖에서 정의해주는 이유는 재사용성을 높이기 위함이다.

return은 enter를 사용하여 행을 바꿀 경우 행이 바뀌면 코드라고 인식하지 못한다
 즉, return은 행이 바뀌기 전까지만 코드로 인식한다.
 이러한 이유로 ( ); 를 사용하여 코드로 인식시키는 용도일 뿐 ( );가 큰 의미는 없다

------------------------------------------------------------------

javascript는 함수를 같은 문서 위든 아래든 순서에 관계없이 어디서든 호출할 수 있다,
 이것을 호이스팅이라 함, 다른 언어는 다를 수 있다.

다른 문서에서 가져오거나 내보낼 때는 import나 export를 사용한다.
 export default App; = App '하나'만 내보내겠다.
 export {App, App2}; = App, App2 '둘' 다 내보내겠다.

------------------------------------------------------------------

개체 (Object)는 키와 값이 필요하다.
{ 
  키1의 이름 : 값, 
  키2의 이름 : 값, 
  키3의 이름 : 값 
}

받을 때에는 { props.이름.키의이름 }

------------------------------------------------------------------

useState = 라이브러리
import { useState } from 'react';

let [변수명, 변수변경명] = useState(변수의 값);
 변수명 = 개체, 변수변경명 = 함수 로 전달된다.
 값을 변경할 때는 변수변경명( ); 을 사용하여서 변경해야한다.
 변수변경명(변경 될 변수의 값);
 변수명을 바꾸면 변수명 자체의 값이 바뀌지만 useState의 값은 변하지 않는다
 변수변경명을 바꾸면 useState의 값은 변하지만 변수명 자체의 값은 변하지 않는다

State가 가지고 있는 값이 배열[ ] 이나 개체{ } 라면 바로 바꿀수가 없다, 이 경우
배열중 어떤 idx번째의 값만 바꾸고 싶다면 스프레드를 이용해서 copy하여
 copy의 [idx] 번째의 값을 바꿔주고 변수변경명(변수명copy); 로 변경한다

 let 변수명copy = [...변수명]; 
 변수명copy[idx] = '값';
 변수명변경(변수명copy);

------------------------------------------------------------------

jsx의 이벤트에서는 함수만 들어갈 수 있다.

함수를 넣는 방법은 두 가지, 직접 함수를 타이핑하거나 아니면 함수를
 생성해서 호출하는 방법

------------------------------------------------------------------

javaScript에서 변수란? 
 가장 큰 특징, 형태를 초월한다, 형태를 선언하지 않고 선언하면서 형태를 정한다.
 즉, 변수에 무엇을 담느냐에 따라서 그 형태가 정해지는 것

------------------------------------------------------------------

map( ) 이라는 메서드는 배열을 반복할 수 있는 유사반복문이다.
map( ) 이라는 메서드는 값을 return할 수 있다.
map( ) 이라는 메서드는 ( )안에 함수만 들어갈 수 있다,

map( function( item, idx, arr ){ });

------------------------------------------------------------------

react route dom = 라이브러리

route는 앱은 페이지가 없기에 route 즉 path의 경로를 설정하여 페이지 변경 기능

react route dom 검색 후 ,

npm install react-router-dom@5.2.0 또는 yarn add react-router-dom 으로 설치

import { BrowserRouter, Switch, Route, Link } from "react-router-dom"; 삽입

------------------------------------------------------------------

param = 패스의 경로 뒤에 :param < 이름은 내가 정하기 나름, 보통 param이라 부른다
 이름은 보통 id로들 많이 한다

import { BrowserRouter as Router, Switch, Route, Link , useParams} from "react-router-dom";

------------------------------------------------------------------

useEffect => react에서 제공하는 라이브러리, useState도 react에서 제공

useEffect (( )=>{
    실행시킬 함수
 })

------------------------------------------------------------------

json 이라는 확장자, javaScript에서 제공하는 문서 확장자
 javaScript에서 자료를 주고 받는 확장자
 
json 에서는 배열개체로 자료를 주고 받는다

내가 올려놓은 깃허브의 서버
https://yeonghoonpark.github.io/react-server/serverData.json

구글에서 axios 검색
터미널에서
npm install axios

서버가 보내온 정보는 data다, 
axios를 사용하면 개체로 변환해서 보내준다 ""가 ''로 변환

------------------------------------------------------------------

build

터미널에서
npm run build

package.json 파일에서 "homepage" : ".", 추가
- "homepage" : ".", 이 방식은 도메인에 따라 다를 수 있다
만약 나의 도메인이  
https://yeonghoonpark.github.io/ 처럼 루트(최상위)라면
"homepage" : "https://yeonghoonpark.github.io/" 이렇게 해준다
나의 도메인이 서브라면 즉,
https://yeonghoonpark.github.io/react-server/ 라면
"homepage" : ".",

build라는 파일이 생성되고 build만 깃허브 서버에 올린다.

내가 깃허브에서 받은 서버에서 확인
https://yeonghoonpark.github.io/react-server/ 

------------------------------------------------------------------



① 지시사항
   - 블로그의 모든 페이지와 기능은 ‘아파치 톰켓’과 'JSP',그리고 ‘MySQL’을 
      사용하여 제작하세요
   
   - 블로그 하단에는 n개의 블로그 목록이 나타나도록 구현하세요
   
   - 블로그 목록을 클릭하면 블로그 내용을 확인할 수 있도록 하세요
   
   - 하단의 ‘더보기’ 버튼과  ‘작성’ 버튼을 생성하고 ‘더보기’ 클릭시 다음 블로그 
      내용이 n개씩 나타나도록 구현하세요
   
   - ‘작성’버튼을 클릭하면 ‘제목’,‘내용’,‘이미지 첨부’가 가능하도록 구현하세요

※ 평가 결과물은  "네크워크프로그래밍구현–훈련생성명.pdf" 파일로 정리하고 “java, DB”등의 필요파일 또한 훈련생 본인의 깃허브(https://www.github.com) 상의 "report12" 레파지토리에 업로드 하세요




