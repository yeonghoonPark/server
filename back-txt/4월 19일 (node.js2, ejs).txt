node.js를 이용한 서버 구축 프로세스
1. node.js 설치
2. 서버로 작업 할 폴더 생성
3. package.json생성 => 터미널에서 npm init => entry point는 정확하게 지정
4. express 라이브러리 설치 => npm install express
5. entry point에서 지정한 서버파일 생성
6. post방식의 요청시 body-parser를 이용하여 요청값 수신
7. ejs 설치

---------------------------------------------------------------------------------

서버 작업할
todoApp 폴더 생성

package.json만들기 (package.json 은 환경설정 파일이다.)
터미널에서
npm init
entry point => server.js

작업 할 파일 생성
entry point로 지정한 server.js 이름으로 파일 만들기

express 라이브러리 설치
터미널에서 
npm install express
그 후에 
const express = require('express');
const app = express();

bodyparser middlewear
app.use(express.urlencoded({extended:true}));
app.use(express.json());

serveropen
app.listen(경로, ()=>{
    console.log('port opened successfully');
});
터미널에서
node entry point명
즉, entry point명이 server.js라면
node server.js

몽고db에 접근할 수 있는 모듈설치
터미널에서
npm install mongodb

mongodb.com 에서 db생성하고 app으로 연결 할 수 있는 도메인?
mongodb+srv://admin:qwer1234@cluster0.pi799.mongodb.net/todoappDB?retryWrites=true&w=majority

(구글에서 nodejs mongodb 또는 nodejs mysql 을 검색하면 연동하는 자료가 많다)

---------------------------------------------------------------------------------

프론트에서 서버로 자료를 전송할 땐 get, post가 가장 대표적.
서버가 프론트로 자료를 전송하는 방법은?
서버로부터 넘어온 자료를 프론트에서 출력하기 위해서 ejs를 사용한다.

ejs 설치
터미널에서
npm install ejs

ejs를 사용하려면 작업 폴더에서 views폴더를 만들고 ejs파일을 옮겨주어야한다
(images 폴더에 이미지를 넣는 개념, 똑같진 않다)

server.js 에 라이브러리 삽입
app.set('view engine', 'ejs');
ejs파일은 sendFile가 아니라 render('파일명'); ex)=> render('list.ejs'); 
그리고 파일명에는 경로가 붙지 않고 파일명만 붙는다, 
/list.ejs = X
/list.ejs = O

그리고 수업 중 list.ejs 파일 생성.
ejs는 전처리 된 html 형식의 문서이다. 
react인 jsx는 자바스크립트에 html을 꼳아 넣은 것
ejs는 html에 자바스크립트를 꼳아 넣은 것, 
<script /> 없이 자바스크립트, nodejs 문법 사용

ejs는 views폴더 안에 위치해야하기 때문에 views폴더 생성.

ejs파일에서 주석은 #이다 ex) => <%#

findOne(조건, 콜백);















